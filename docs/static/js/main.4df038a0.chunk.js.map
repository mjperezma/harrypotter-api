{"version":3,"sources":["images/header.jpg","images/logo.png","components/Filter.js","components/CharacterCard.js","components/CharacteresList.js","components/Home.js","components/CharacterFull.js","App.js","services/api.js","serviceWorker.js","index.js"],"names":["module","exports","Filter","props","className","type","onChange","ev","preventDefault","handleSearch","value","target","placeholder","CharacterCard","this","charactersData","id","name","house","image","src","alt","to","key","Component","CharacteresList","dontExist","length","map","characterData","index","Home","CharacterFull","console","log","icon","App","state","characters","search","bind","handleApp","filterCharacters","searchApi","renderDetailFull","fetch","then","response","json","data","setState","nameId","parseInt","match","params","character","find","item","undefined","filter","toLowerCase","includes","logo","header","exact","path","render","React","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4df038a0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/header.c548701c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.dd03b04a.png\";","import React from 'react';\n\nconst Filter = (props) => {\n  const handleSearch = (ev) => {\n    ev.preventDefault();\n    props.handleSearch({\n      value: ev.target.value,\n    });\n  };\n\n  return (\n    <form className='container--search'>\n      <div className='container--search--div'>\n        <label className='title--search' type='text'>\n          Shearch your favorite\n        </label>\n        <input onChange={handleSearch} className='input--search' placeholder='Search your character' type='text' />\n        <button className='btn--search'>¡Search!</button>\n      </div>\n    </form>\n  );\n};\n\nexport default Filter;\n","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\n\nclass CharacterCard extends Component {\n  render() {\n    const {id, name, house, image} = this.props.charactersData;\n    return (\n      <div id={id} className='item--list-2'>\n        <img className='img--list' src={image} alt={name} />\n\n        <div>\n          <Link to={`/character/${name}`} className='decoration'>\n            <h3 key={id} className='item--list--name '>\n              {name}\n            </h3>\n            <p className='item--list--name'>{house || 'Pure-Blod'}</p>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CharacterCard;\n","import React from 'react';\nimport CharacterCard from './CharacterCard';\n\nconst CharacteresList = (props) => {\n  const dontExist = props.charactersData.length === 0 ? <h3>El personje que buscas no es de Howgwarts ¡Introduce otro distinto!</h3> : '';\n  const {charactersData} = props;\n  return (\n    <main>\n      {dontExist}\n      <ul className='item--list'>\n        {charactersData.map((characterData, index) => (\n          <li key={index}>\n            <CharacterCard charactersData={characterData} />\n          </li>\n        ))}\n      </ul>\n    </main>\n  );\n};\n\nexport default CharacteresList;\n","import React, {Fragment} from 'react';\nimport Filter from './Filter';\nimport CharacteresList from './CharacteresList';\n\nconst Home = (props) => {\n  const {handleSearch, charactersData, value} = props;\n  return (\n    <Fragment>\n      <Filter handleSearch={handleSearch} value={value} />\n      <CharacteresList charactersData={charactersData} />\n    </Fragment>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {Link} from 'react-router-dom';\n\nfunction CharacterFull(props) {\n  console.log(props);\n\n  return (\n    <div>\n      <h3>{props.name}</h3>\n      <FontAwesomeIcon icon='arrow-square-right' />;\n    </div>\n  );\n}\n\nexport default CharacterFull;\n","import React from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport header from './images/header.jpg';\nimport './App.css';\nimport logo from './images/logo.png';\nimport Home from './components/Home';\nimport {apiPoter} from '../src/services/api';\nimport CharacterFull from './components/CharacterFull';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      characters: [],\n      search: '',\n    };\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleApp = this.handleApp.bind(this);\n    this.filterCharacters = this.filterCharacters.bind(this);\n    this.searchApi = this.searchApi.bind(this);\n    this.renderDetailFull = this.renderDetailFull.bind(this);\n  }\n\n  searchApi() {\n    apiPoter().then((data) => {\n      this.setState({\n        characters: data,\n      });\n    });\n  }\n  componentDidMount() {\n    this.searchApi();\n  }\n\n  handleSearch(data) {\n    this.setState({\n      search: data.value,\n    });\n  }\n\n  renderDetailFull(props) {\n    const nameId = parseInt(props.match.params.name);\n    const character = this.state.characters.find((item) => item.name === nameId);\n    if (nameId === undefined) {\n      return <p> La personita que buscas no es de Howgarts, ¡busca otro!</p>;\n    } else {\n      return <CharacterFull character={character} />;\n    }\n  }\n\n  handleApp() {\n    console.log('me hacen click en App, soy el evento de Characteres');\n  }\n\n  filterCharacters() {\n    return this.state.characters.filter((character) => character.name.toLowerCase().includes(this.state.search.toLowerCase())).filter((character) => character.name.toLowerCase().includes(this.state.search.toLowerCase()));\n  }\n  render() {\n    return (\n      <>\n        <div className='App'>\n          <header className='container--header'>\n            <img src={logo} alt={logo} className='header--' />\n\n            <img src={header} alt={header} className='header--img' />\n          </header>\n\n          <Switch>\n            <Route exact path='/'>\n              <Home handleSearch={this.handleSearch} handleApp={this.handleApp} charactersData={this.filterCharacters()} value={this.state.search} />\n            </Route>\n            <Route path='/character:id' render={this.renderDetailFull} />\n          </Switch>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","const ENDPOINT = 'http://hp-api.herokuapp.com/api/characters';\n\nconst apiPoter = () => fetch(ENDPOINT).then((response) => response.json());\n\nexport {apiPoter};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {HashRouter} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}